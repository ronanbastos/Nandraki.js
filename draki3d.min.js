class ThreeCore{constructor(){if(ThreeCore.instance)return ThreeCore.instance;this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),this.renderer=new THREE.WebGLRenderer({alpha:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),ThreeCore.instance=this}init(e){e.appendChild(this.renderer.domElement),this.animate()}animate(){requestAnimationFrame((()=>this.animate())),this.scene.traverse((e=>{e.userData.scripts&&e.userData.scripts.forEach((t=>t(e)));const t=e.userData.components||{};for(let s in t){const a=t[s];"function"==typeof a.update&&a.update(e)}})),this.renderer.render(this.scene,this.camera)}}class ThreeFactory{createLight(){return new THREE.PointLight(16777215,1)}createCube(){const e=new THREE.BoxGeometry,t=new THREE.MeshStandardMaterial({color:65280});return new THREE.Mesh(e,t)}createCamera(){return new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,.1,1e3)}}class EntityBuilder{constructor(){this.entity=new THREE.Object3D}addMesh(e){return this.entity.add(e),this}setPosition(e,t,s){return this.entity.position.set(e,t,s),this}build(){return this.entity}}class PrototypeFactory{constructor(){this.prototypes={}}register(e,t){this.prototypes[e]=t}clone(e){return this.prototypes[e]?.clone()??null}}class ComponentRegistry{static components={};static register(e,t){this.components[e]=t}static instantiate(e,...t){const s=this.components[e];return s?new s(...t):null}}const TagSystem={add(e,t){e.userData.tags||(e.userData.tags=new Set),e.userData.tags.add(t)},has:(e,t)=>e.userData.tags?.has(t)??!1,remove(e,t){e.userData.tags?.delete(t)},getAll(e){const t=new ThreeCore,s=[];return t.scene.traverse((t=>{t.userData.tags?.has(e)&&s.push(t)})),s}};class Game{static create(e,t=null){const s=new ThreeFactory,a={cube:"createCube",camera:"createCamera",light:"createLight"}[e];if(!a||"function"!=typeof s[a])throw new Error(`Tipo de objeto desconhecido: "${e}"`);const n=s[a]();return t&&(n.name=t),n}}const drak=function(){const e=new ThreeCore,t={};return function s(a=null){if(!a)return{cache:{set(e,s){t[e]=s},get:e=>t[e]},byTag(t){const a=[];return e.scene.traverse((e=>{e.userData.tags?.has(t)&&a.push(s(e.name))})),a}};const n=e.scene.getObjectByName(a);return n?{set(e,t){const s=e.split(".");let a=n;for(;s.length>1;)a=a[s.shift()];a[s[0]]=t},get(e){const t=e.split(".");let s=n;for(let e of t)s=s[e];return s},script(e){n.userData.scripts||(n.userData.scripts=[]),n.userData.scripts.push(e)},component:e=>n.userData?.components?.[e]??null,addComponent(e,t){n.userData.components||(n.userData.components={}),n.userData.components[e]=t},removeComponent(e){n.userData.components&&delete n.userData.components[e]},addTag(e){n.userData.tags||(n.userData.tags=new Set),n.userData.tags.add(e)},removeTag(e){n.userData.tags?.delete(e)},hasTag:e=>n.userData.tags?.has(e)??!1,echo(){console.log(n)},eye(){n.material?.color&&(n.userData.originalColor||(n.userData.originalColor=n.material.color.clone()),n.material.color.set(16776960),setTimeout((()=>{n.material&&n.userData.originalColor&&n.material.color.copy(n.userData.originalColor)}),1e3))},callTo(t){const s=e.scene.getObjectByName(t);s&&console.log("Chamado:",s)},touch(t){const s=e.scene.getObjectByName(t);s?.userData.scripts&&s.userData.scripts.forEach((e=>e(s)))},ref:e=>n.userData?.[e]??null,link(t){const s=e.scene.getObjectByName(t);s&&s.add(n)},pointTo(t){const s=e.scene.getObjectByName(t);s?.position&&n.lookAt(s.position)},hook(e){if("function"==typeof e)try{return e(n)}catch(e){console.error(`hook: erro ao executar função para "${n.name}"`,e)}else console.warn("hook: argumento não é uma função válida")}}:(console.warn(`Objeto "${a}" não encontrado`),null)}}();class HUD{constructor(){this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.canvas.style.position="absolute",this.canvas.style.top="0",this.canvas.style.left="0",this.canvas.style.pointerEvents="none",this.canvas.style.zIndex="1000",this.canvas.style.background="transparent",document.body.appendChild(this.canvas),this.items=new Map,this.resize(),window.addEventListener("resize",(()=>this.resize()))}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}add(e,t,s=10,a=10,n="#ffffff",r="16px monospace"){this.items.set(e,{value:t,x:s,y:a,color:n,font:r})}update(e,t){this.items.has(e)&&(this.items.get(e).value=t)}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);for(const[e,{value:t,x:s,y:a,color:n,font:r}]of this.items)this.ctx.fillStyle=n,this.ctx.font=r,this.ctx.fillText(`${e}: ${t}`,s,a)}}
